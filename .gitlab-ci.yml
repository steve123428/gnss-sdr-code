# This script sets up a Continuous Reproducibility system for GNSS-SDR at GitLab
#
# Useful links:
# Website: http://gnss-sdr.org
# Upstream repository: https://github.com/gnss-sdr/gnss-sdr.git
# Dockerfile at https://github.com/carlesfernandez/docker-gnsssdr
# Docker cloud image: carlesfernandez/docker-gnsssdr
#
# In order to use this system and be able to make changes, you will need:
#  - A GitHub account https://github.com
#  - A GitLab account https://gitlab.com
#  - A Docker Hub account https://hub.docker.com
#  - A repository at Docker Hub.
#
# In order to use this system, please fork at GitHub the upstream
# repository; import that forked repo at GitLab; then add, commit and push to
# your GitLab repo this .gitlab-ci.yml file; and finally go to your project page
# at GitLab and set up the following secret variables. In the left panel:
# Settings > CI / CD > Secret variables
#
# DOCKER_HUB_USER
# DOCKER_HUB_REPO
# DOCKER_HUB_PASSWORD
#
# You will need either to protect your branch, or to leave those variables
# unproctected.
#
# For instance, my settings are:
# DOCKER_HUB_USER = carlesfernandez
# DOCKER_HUB_REPO = docker-gnsssdr
# DOCKER_HUB_PASSWORD = ********************
#
# If you want to make changes in the source code, please branch-off from the
# 'next' branch of your forked repository and, if needed, add new jobs in this
# file at the 'deploy' and 'experiment' stages.
#
# Feel free to delete the docker-gnsssdr and docker-pybombs-gnsssdr jobs,
# they are for developers' team only. Actually, this is their CI/CD system.
#
# More info about how to contribute to GNSS-SDR at
# https://github.com/gnss-sdr/gnss-sdr/blob/master/CONTRIBUTING.md
#
# (C) Carles Fernandez-Prades, 2018 cfernandez@cttc.cat


# This is performed before the scripts in the stages step
before_script:
  - source /etc/profile


# Defines stages which are to be executed
stages:
  - build
  - test
  - deploy
  - experiment


# Stage "build"
debian8.10:
  image: debian:8.10-slim
  stage: build
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends build-essential cmake git libboost-dev libboost-date-time-dev libboost-system-dev libboost-filesystem-dev libboost-thread-dev libboost-chrono-dev libboost-serialization-dev liblog4cpp5-dev gnuradio-dev libblas-dev liblapack-dev libarmadillo-dev libgflags-dev libgoogle-glog-dev libgnutls-openssl-dev python-mako python-six libmatio-dev libgtest-dev
    - cd build
    - cmake ..
    - make -j2
    - make install


debian9.3:
  image: debian:9.3-slim
  stage: build
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends build-essential cmake git libboost-dev libboost-date-time-dev libboost-system-dev libboost-filesystem-dev libboost-thread-dev libboost-chrono-dev libboost-serialization-dev liblog4cpp5-dev gnuradio-dev libblas-dev liblapack-dev libarmadillo-dev libgflags-dev libgoogle-glog-dev libgnutls-openssl-dev python-mako python-six libmatio-dev googletest
    - cd build
    - cmake ..
    - make -j2
    - make install


debian9.3-i386:
  image: i386/debian:9.3-slim
  stage: build
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends build-essential cmake git libboost-dev libboost-date-time-dev libboost-system-dev libboost-filesystem-dev libboost-thread-dev libboost-chrono-dev libboost-serialization-dev liblog4cpp5-dev gnuradio-dev libblas-dev liblapack-dev libarmadillo-dev libgflags-dev libgoogle-glog-dev libgnutls-openssl-dev python-mako python-six libmatio-dev googletest
    - cd build
    - cmake ..
    - make -j2
    - make install


debian10:
  image: debian:buster-slim
  stage: build
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends build-essential cmake git libboost-dev libboost-date-time-dev libboost-system-dev libboost-filesystem-dev libboost-thread-dev libboost-chrono-dev libboost-serialization-dev liblog4cpp5-dev gnuradio-dev libblas-dev liblapack-dev libarmadillo-dev libgflags-dev libgoogle-glog-dev libgnutls-openssl-dev python-mako python-six libmatio-dev googletest
    - cd build
    - cmake ..
    - make -j2
    - make install


ubuntu16.04:
  image: ubuntu:xenial
  stage: build
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends build-essential cmake git libboost-dev libboost-date-time-dev libboost-system-dev libboost-filesystem-dev libboost-thread-dev libboost-chrono-dev libboost-serialization-dev liblog4cpp5-dev gnuradio-dev libblas-dev liblapack-dev libarmadillo-dev libgflags-dev libgoogle-glog-dev libgnutls-openssl-dev python-mako python-six libmatio-dev libgtest-dev
    - cd build
    - cmake ..
    - make -j2
    - make install


ubuntu18.04:
  image: ubuntu:bionic
  stage: build
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends build-essential cmake git libboost-dev libboost-date-time-dev libboost-system-dev libboost-filesystem-dev libboost-thread-dev libboost-chrono-dev libboost-serialization-dev liblog4cpp5-dev gnuradio-dev libblas-dev liblapack-dev libarmadillo-dev libgflags-dev libgoogle-glog-dev libgnutls-openssl-dev python-mako python-six libmatio-dev googletest
    - cd build
    - cmake ..
    - make -j2
    - make install


# Stage "test"
run-tests:
  image: debian:9.3-slim
  stage: test
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends build-essential cmake git libboost-dev libboost-date-time-dev libboost-system-dev libboost-filesystem-dev libboost-thread-dev libboost-chrono-dev libboost-serialization-dev liblog4cpp5-dev gnuradio-dev libblas-dev liblapack-dev libarmadillo-dev libgflags-dev libgoogle-glog-dev libgnutls-openssl-dev python-mako python-six libmatio-dev googletest
    - mkdir build-test
    - mkdir build64
    - cd build-test
    - cmake ..
    - make -j2
    - make check
    - ../install/run_tests --gtest_output=xml
    - mv *.xml ../build64/
    - cd ..
    - rm -rf build-test

  artifacts:
    paths:
      - build64/*.xml


run-tests-i386:
  image: i386/debian:9.3-slim
  stage: test
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends build-essential cmake git libboost-dev libboost-date-time-dev libboost-system-dev libboost-filesystem-dev libboost-thread-dev libboost-chrono-dev libboost-serialization-dev liblog4cpp5-dev gnuradio-dev libblas-dev liblapack-dev libarmadillo-dev libgflags-dev libgoogle-glog-dev libgnutls-openssl-dev python-mako python-six libmatio-dev googletest
    - mkdir build-test
    - mkdir build32
    - cd build-test
    - cmake -DENABLE_PACKAGING=ON ..
    - make -j2
    - make check
    - ../install/run_tests --gtest_output=xml
    - mv *.xml ../build32/
    - cd ..
    - rm -rf build-test

  artifacts:
    paths:
      - build32/*.xml


# Stage "deploy"
docker-gnsssdr:
  image: docker:latest
  stage: deploy
  services:
    - docker:dind
  script:
    - wget https://raw.githubusercontent.com/carlesfernandez/docker-gnsssdr/master/Dockerfile
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - mkdir docker-build
    - cd docker-build
    - cp ../Dockerfile .
    - docker build -t carlesfernandez/docker-gnsssdr .
    - docker push carlesfernandez/docker-gnsssdr
  only:
    - next
  allow_failure: true


docker-pybombs-gnsssdr:
  image: docker:latest
  stage: deploy
  services:
    - docker:dind
  script:
    - wget https://raw.githubusercontent.com/carlesfernandez/docker-pybombs-gnsssdr/master/Dockerfile
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - mkdir docker-build
    - cd docker-build
    - cp ../Dockerfile .
    - docker build -t carlesfernandez/docker-pybombs-gnsssdr .
    - docker push carlesfernandez/docker-pybombs-gnsssdr
  only:
    - next
  allow_failure: true


docker-access18:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  script:
    - mkdir docker-build
    - cd docker-build
    - echo -e "FROM phusion/baseimage:0.10.0\nMAINTAINER carles.fernandez@cttc.es\nCMD [\"/sbin/my_init\"]\nWORKDIR /home/src\nRUN apt-get update && apt-get install -y build-essential cmake libarmadillo-dev libblas-dev libboost-chrono-dev libboost-dev libboost-date-time-dev libboost-filesystem-dev libboost-serialization-dev libboost-system-dev libboost-thread-dev libgflags-dev libgoogle-glog-dev libgtest-dev libgnutls-openssl-dev liblapack-dev liblog4cpp5-dev libmatio-dev libuhd-dev git ca-certificates gnuradio-dev gr-osmosdr python-mako python-six libxml2-dev bison flex wget && rm -rf /var/lib/apt/lists/*\nRUN wget https://gitlab.com/$GITLAB_USER_LOGIN/gnss-sdr/repository/$CI_COMMIT_REF_NAME/archive.tar.gz\nRUN tar xvzf archive.tar.gz\nRUN ls -la\nRUN cd gnss-sdr-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA\nRUN cd build\nRUN cmake -DENABLE_PACKAGING=ON -DENABLE_INSTALL_TESTS=ON .. && make && make install\nRUN /usr/bin/volk_profile -v 8111\nRUN /usr/local/bin/volk_gnsssdr_profile\nRUN apt-get clean && rm -rf /tmp/* /var/tmp/*\nRUN rm -rf /home/src\nWORKDIR /home\nCMD [\"bash\"]" > Dockerfile
    - docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD"
    - docker build -t $DOCKER_HUB_USER/$DOCKER_HUB_REPO .
    - docker tag $DOCKER_HUB_USER/$DOCKER_HUB_REPO:latest $DOCKER_HUB_USER/$DOCKER_HUB_REPO:access18
    - docker push $DOCKER_HUB_USER/$DOCKER_HUB_REPO:access18


# Stage "experiment"
run-access18:
  image: $DOCKER_HUB_USER/$DOCKER_HUB_REPO:access18
  stage: experiment
  script:
    - apt-get update
    # Grab analysis and representation tools
    - apt-get install -y texlive-latex-base texlive-fonts-recommended texlive-latex-extra epstool transfig octave
    # Grab the data set
    - apt-get install -y curl
    - cd data
    - curl https://zenodo.org/record/1172670/files/L2_signal_samples.tar.xz --output L2_signal_samples.tar.xz
    - tar xvfJ L2_signal_samples.tar.xz
    - echo "2090ad3dfb3f461314252a1e6243d714  L2_signal_samples.tar.xz" > data.md5
    - md5sum -c data.md5
    - cd ..
    # Execute the experiment (example)
    - run_tests --gtest_filter==Multi*
    - echo " x = 0:0.01:3; hf = figure (\"visible\", \"off\"); plot (x, erf (x), \"linewidth\", 2); hold on; plot (x, x, \"r\", \"linewidth\", 2); axis ([0, 3, 0, 1]); text (0.65, 0.6175, ['\leftarrow x = \pi \int_{0}^{x}e^{-t^2} dt = 0.6175']); xlabel (\"x\"); ylabel (\"erf (x)\"); title (\"erf (x) with text annotation\"); hh=findall(hf,\"-property\",\"FontName\"); set(hh,\"FontName\",\"Times\"); hh2=findall(hf,\"-property\",\"interpreter\"); set(hh2, \"interpreter\", \"tex\"); hh3=findall(hf,\"-property\",\"FontSize\"); set(hh3, \"FontSize\", 22); print (hf, \"results.eps\", \"-depsc\"); " >  my_test_file.m
    - octave --no-gui my_test_file.m
    - epspdf results.eps results.pdf
    - mkdir access18
    - cp results.pdf access18/

  artifacts:
    paths:
      - access18/*.pdf
